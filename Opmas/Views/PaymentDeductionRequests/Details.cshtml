@using System.Data.Entity
@using Opmas.Data.DataContext.DataContext.EmployeeDataContext
@using Opmas.Data.Objects.Entities.Employee
@using Opmas.Data.Objects.Entities.User
@using Opmas.Data.Service.Enums
@model Opmas.Data.Objects.Payment.PaymentDeductionRequest

@{
    ViewBag.Title = "Details";
    ViewBag.Header = "Deduction Requests";
    ViewBag.Subheader = "View deduction details";
    Layout = "~/Views/Shared/Layout/_LayoutForm.cshtml";
    var loggedinuser = Session["opmasloggedinuser"] as AppUser;
    var userRole = Session["role"] as Role;
    var db = new EmployeeDataContext();

    //check if leave is from notification and mark as read
    long? notificationId = ViewBag.ReadId;

    var notification = db.ApplicationNotifications.Find(notificationId);
    if (notification != null)
    {
        notification.Read = true;
    }
    if (notificationId == null)
    {
    }
    else
    {
        db.Entry(notification).State = EntityState.Modified;
        db.SaveChanges();
    }
}


<dl class="dl-horizontal">
    <dt>
        @Html.DisplayNameFor(model => model.Employee.EmployeeId)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Employee.EmployeeId)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.RequestTitle)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.RequestTitle)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.Reason)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Reason)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.Status)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Status)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.Comment)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Comment)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.CreatedBy)
    </dt>

    <dd>
        @(db.AppUsers.Find(Model.CreatedBy).DisplayName)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.DateCreated)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.DateCreated)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.DateLastModified)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.DateLastModified)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.LastModifiedBy)
    </dt>

    <dd>
        @(db.AppUsers.Find(Model.LastModifiedBy).DisplayName)
    </dd>

</dl>
    @if (loggedinuser?.EmployeeId == Model.EmployeeId)
    {
        if (Model.Status == PaymentDeductionRequestStatus.Pending.ToString())
        {
            <!-- Button trigger modal -->
            <button type="button" class="btn btn-primary  fa fa-pencil" data-toggle="modal" data-target="#myModal">
                Edit Request
            </button>

            <!-- Modal -->
            <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <h4 class="modal-title" id="myModalLabel">Edit Payment Deduction Request</h4>
                        </div>
                        <div class="modal-body">
                            @{
                                Html.RenderPartial("PaymentManagement/EditPaymentDeductionReqest", Model);
                            }
                        </div>
                    </div>
                </div>

            </div>
            <!-- Button trigger modal -->
            <button type="button" class="btn btn-danger fa fa-trash" data-toggle="modal" data-target="#myModal1">
                Delete Request
            </button>

            <!-- Modal -->
            <div class="modal fade" id="myModal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel1">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <h4 class="modal-title" id="myModalLabel1">Delete Payment Deduction Request</h4>
                        </div>@using (Html.BeginForm("Delete", "PaymentDeductionRequests", new {id = Model.PaymentDeductionRequestId}))
                              {
                                  <div class="modal-body">

                                      @Html.AntiForgeryToken()
                                      <p>
                                          Are you sure you want to delete the deduction request?
                                      </p>

                                  </div>
                                  <div class="modal-footer">
                                      <input type="submit" value="Delete" class="btn btn-danger pull-right fa fa-trash"/>
                                      <input type="button" data-dismiss="modal" value="Cancel" class="btn btn-default pull-left"/>
                                  </div>
                              }
                    </div>
                </div>

            </div>
        }
    }
    @if ((Model.Status == PaymentDeductionRequestStatus.Denied.ToString()) || (Model.Status == PaymentDeductionRequestStatus.Granted.ToString()))
    {
        if (Model.Status == PaymentDeductionRequestStatus.Granted.ToString())
        {
            <a href="@Url.Action("StopDeduction", new {id = Model.PaymentDeductionRequestId})" class="btn btn-danger btn-xs"><i class="fa fa-remove"></i>Stop Deduction</a>
        }
    }
    else
    {
        if (Model.Status == PaymentDeductionRequestStatus.Pending.ToString())
        {
            @Html.ActionLink("Approve", "GrantRequest", new {id = Model.PaymentDeductionRequestId}, new {@class = "btn btn-default btn-xs fa fa-check"})

            if ((userRole != null) && userRole.ManagePayment)
            {
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-danger btn-xs fa fa-recycle" data-toggle="modal" data-target="#myModal">
                    Deny Request
                </button>

                <!-- Modal -->
                <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                                <h4 class="modal-title" id="myModalLabel">Comment</h4>
                            </div>
                            <div class="modal-body">
                                @{
                                    Html.RenderPartial("DenyPaymentDeductionRequest", Model);
                                }
                            </div>
                        </div>
                    </div>

                </div>
            }
        }
    }
