@using Opmas.Data.DataContext.DataContext.EmployeeDataContext
@using Opmas.Data.DataContext.DataContext.SystemDataContext
@using Opmas.Data.Objects.Entities.SystemManagement
@using Opmas.Data.Service.Enums
@model Opmas.Data.Objects.Entities.Employee.EmployeeMedicalData
@{
    ViewBag.Title = "Step Six:Employee Medical & Other Data";
    ViewBag.HeaderClass = "page-header";
    var institution = Session["institution"] as Institution;
    var role = new RoleDataContext();
    var faculty = new FacultyDataContext();
    ViewBag.RoleId = new SelectList(role.Roles.Where(n => (n.InstitutionId == institution.InstitutionId) && (n.Name != "Institution Administrator") && (n.Name != "Platform Administrator")), "RoleId", "Name");
    ViewBag.FacultyId = new SelectList(faculty.Faculties.Where(n => n.InstitutionId == institution.InstitutionId), "FacultyId", "Name");
}
<header class="@ViewBag.HeaderClass">
    <div class="overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <h2 class="tagline">@ViewBag.Title</h2>
            </div>
        </div>
    </div>
</header>

<div class="container">
    <div class="row hidden-xs">
        <ul class="progressbar">
            <li>
                Step One <br/>
                <small>Personal Data</small>

            </li>
            <li>
                Step Two <br/>
                <small>Educational Qualification</small>
            </li>
            <li>
                Step Three <br/>
                <small>Past Work Experience</small>
            </li>
            <li>
                Step Four <br/>
                <small>Next Of Kin Data</small>
            </li>
            <li>
                Step Five <br/>
                <small>Bank Data</small>
            </li>
            <li class="active">
                Step Six <br/>
                <small>Medical/Work Data</small>

            </li>
            <li>
                Confirmation <br/>
                <small>Review of Employee Info</small>
            </li>
            <li>
                Completed <br/>
                <small>Registration Complete</small>
            </li>
        </ul>
    </div>
    <hr/>
    <div class="row">
        <div class="col-md-12">
            @if (TempData["medical"] != null)
            {
                if (TempData["notificationtype"].Equals(NotificationTypeEnum.Success.ToString()))
                {
                    <div class="alert-success alert-dismissable">@TempData["medical"]</div>
                }
                else if (TempData["notificationtype"].Equals(NotificationTypeEnum.Error.ToString()))
                {
                    <div class="alert-danger alert-dismissable">@TempData["medical"]</div>
                }
                else if (TempData["notificationtype"].Equals(NotificationTypeEnum.Info.ToString()))
                {
                    <div class="alert-info alert-dismissable">@TempData["medical"]</div>
                }
            }
            @using (Html.BeginForm("MedicalData", "EmployeeManagement", FormMethod.Post, new {@class = "form"}))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(false, "", new {@class = "text-danger"})
                <fieldset>
                    <legend>Employee Bank Data</legend>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(m => m.BloodGroup, new {@class = "control-label"}) <span class="req">*</span>
                        @Html.DropDownListFor(m => m.BloodGroup, EnumHelper.GetSelectList(typeof(BloodGroup)), "select your blood group", new {@class = "form-control select-dropdown"})
                    </div>
                    <div class="clearfix"></div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(m => m.Genotype, new {@class = "control-label"})<span class="req">*</span>
                        @Html.DropDownListFor(m => m.Genotype, EnumHelper.GetSelectList(typeof(Genotype)), "select your genotype", new {@class = "form-control select-dropdown"})
                    </div>
                </fieldset>
                <div class="clearfix"></div>
                <fieldset>
                    <legend>Employee Work & Other Data</legend>

                    <div class="form-group col-md-6">
                        @Html.Label("Employment Type", new {@class = "control-label"}) <span class="req">*</span>
                        @Html.DropDownListFor(m => m.EmploymentTypeId, null, "--Please select your employment type--", new { @class = "form-control select-dropdown"})
                    
                    </div>
                    <div class="form-group col-md-6">
                        @Html.Label("Employment Category", new {@class = "control-label"})<span class="req">*</span>
                        @Html.DropDownListFor(m => m.EmploymentCategory, EnumHelper.GetSelectList(typeof(EmployementCategory)), "select your employment category", new {@class = "form-control select-dropdown"})
                    </div>
                    <div class="form-group col-md-6">
                        @Html.Label("Employment Date", new {@class = "control-label"})<span class="req">*</span>
                        @Html.TextBoxFor(m => m.EmploymentDate, null, new {@class = "form-control startDate", placeholder = "Please select employment date"})
                    </div>

                    <div class="form-group col-md-6">
                        @Html.Label("Employment Position", new {@class = "control-label"})<span class="req">*</span>
                        @Html.TextBoxFor(m => m.EmploymentPosition, null, new {@class = "form-control", placeholder = "Please enter employment position"})
                    </div>

                    <div class="form-group col-md-6">
                        @Html.Label("FacultyId", "Assigned Faculty", new {@class = "control-label"})
                        @Html.DropDownListFor(m => m.FacultyId, null, "--Please select your faculty--", new {@class = "form-control select-dropdown", id = "faculty"})


                    </div>
                    <div class="form-group col-md-6">
                        @Html.Label("DepartmentId", "Assigned Department", new {@class = "control-label"})
                        @Html.DropDownListFor(m => m.DepartmentId, new SelectList(string.Empty, "Value", "Text"), "--Please select your deparment--", new {@class = "form-control select-dropdown", id = "department"})


                    </div>
                    <div class="form-group col-md-6">
                        @Html.Label("UnitId", "Assigned Unit", new {@class = "control-label"})
                        @Html.DropDownListFor(m => m.UnitId, new SelectList(string.Empty, "Value", "Text"), "--Please select your assigned unit--", new {@class = "form-control select-dropdown", id = "unit"})


                    </div>
                    <div class="form-group col-md-6">
                        @Html.Label("RoleId", "Assigned Role", new {@class = "control-label"})
                        @Html.DropDownListFor(m => m.RoleId, null, "--Please select your role--", new {@class = "form-control select-dropdown"})

                    </div>
                </fieldset>
                <div class="col-md-12">

                    <input type="submit" class="btn btn-default cancel" value="Back"/>
                    <input type="submit" value="Next" class="btn btn-brown pull-right"/>
                </div>
            }
        </div>
    </div>
</div>

@section scripts {
    <script>

        $(document)
            .ready(function() {
                $('.startDate').datepicker({ 'endDate': new Date() });

                //checks if the faculty has a value before displaying assigned department
                if ($('#faculty').val() != '') {
                    getDepartmentForFaculty();

                }
                if ($('#department').val() != '') {
                    getUnitsForDepartment();

                }

                //loads assigned department and faculty for state on change/select
                $('#faculty').on('change', function() { getDepartmentForFaculty(); });
                $('#department').on('change', function() { getUnitsForDepartment(); });

                //Ajax call for department assigned to faculty
                function getDepartmentForFaculty() {

                    $("#department").empty();
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GetDepartmentForFaculty", "EmployeeManagement")',
                        dataType: 'json',
                        data: { id: $("#faculty").val() },
                        success: function(department) {

                            $.each(department,
                                function(i, department) {
                                    $("#department")
                                        .append('<option value="' +
                                            department.DepartmentId +
                                            '">' +
                                            department.Name +
                                            '</option>');
                                });
                        },
                        error: function(ex) {
                            alert('Failed to retrieve department.' + ex);
                        }
                    });

                }

                //Ajax ends


                //Ajax call for units assigned to department
                function getUnitsForDepartment() {

                    $("#unit").empty();
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("GetUnitsForDepartment", "EmployeeManagement")',
                        dataType: 'json',
                        data: { id: $("#department").val() },
                        success: function(unit) {

                            $.each(unit,
                                function(i, unit) {
                                    $("#unit")
                                        .append('<option value="' + unit.UnitId + '">' + unit.Name + '</option>');
                                });
                        },
                        error: function(ex) {
                            alert('Failed to retrieve unit.' + ex);
                        }
                    });

                }

                //Ajax ends
            });
    </script>
}